import mongoose from 'mongoose';

const ParticipantSchema = new mongoose.Schema({
  address: { type: String, required: true },
  attemptsLeft: { type: Number, default: 5 },
  joinedAt: { type: Date, default: Date.now }
});

const MessageSchema = new mongoose.Schema({
  role: { type: String, enum: ['user', 'assistant'], required: true },
  content: { type: String, required: true },
  senderAddress: { type: String, required: true },
  recipientAddress: { 
    type: String,
    // Only required for private messages in 20 Questions mode
    required: function() {
      return this.role === 'assistant' && 
             this.parent().parent().mode === 'TWENTY_QUESTIONS';
    }
  },
  timestamp: { type: Date, default: Date.now },
  attemptsLeft: { type: Number }, // Snapshot of attempts left when message was sent
});

const TournamentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  mode: { 
    type: String, 
    enum: ['AGENT_CHALLENGE', 'DEBATE_ARENA', 'TWENTY_QUESTIONS'],
    required: true 
  },
  isAutoGenerated: {
    type: Boolean,
    default: false,
    required: function() {
      return this.mode === 'AGENT_CHALLENGE'; // Only required for AGENT_CHALLENGE
    }
  },
  status: {
    type: String,
    enum: ['PENDING', 'ACTIVE', 'COMPLETED'],
    default: 'PENDING'
  },
  winningCondition: {
    type: String,
    enum: ['FIRST_SOLVE', 'JUDGE_SCORE', 'QUICK_SOLVE'],
    required: true
  },
  prizeDistribution: {
    type: String,
    enum: ['WINNER_TAKES_ALL', 'QUADRATIC_SPLIT', 'TOP_FIVE_SPLIT'],
    required: true
  },
  duration: { type: Number }, // Required for DEBATE_ARENA
  entryFee: { type: Number, required: true },
  maxParticipants: { type: Number, required: true },
  currentParticipants: { type: Number, default: 0 },
  participants: [ParticipantSchema],
  agentInstructions: { 
    type: String, 
    required: true,
    default: function() {
      return TOURNAMENT_MODES[this.mode].defaultInstructions[this.isAutoGenerated ? 'auto' : 'custom'];
    }
  },
  challengeStatement: {
    type: String,
    required: function() {
      return this.mode === 'AGENT_CHALLENGE';
    },
    default: function() {
      if (this.mode !== 'AGENT_CHALLENGE') {
        return undefined;
      }
      return this.isAutoGenerated 
        ? "AI will generate a challenge" // Temporary placeholder
        : null; // Must be provided for custom challenges
    }
  },
  isActive: { type: Boolean, default: false },
  treasuryAddress: { type: String, required: true },
  creatorAddress: { type: String, required: true },
  winners: [{
    address: { type: String },
    rank: { type: Number },
    prize: { type: Number }
  }],
  judgeScores: [{
    participantAddress: { type: String },
    score: { type: Number },
    feedback: { type: String }
  }],
  solveTimestamps: [{
    participantAddress: { type: String },
    solvedAt: { type: Date }
  }],
  messages: [MessageSchema],
  walletData: { type: Object },
  createdAt: { type: Date, default: Date.now },
  generatedChallenge: { 
    type: String,
    default: null // For storing AI-generated challenges
  },
  customRules: { 
    type: Object,
    default: null // For storing any mode-specific rules or settings
  },
  debateTopic: {
    type: String,
    required: function() {
      return this.mode === 'DEBATE_ARENA';
    }
  },
  secretTerm: {
    type: String,
    required: function() {
      return this.mode === 'TWENTY_QUESTIONS';
    }
  }
});

// Delete existing model if it exists (for development)
if (mongoose.models.Tournament) {
  delete mongoose.models.Tournament;
}

export default mongoose.models.Tournament || mongoose.model('Tournament', TournamentSchema);